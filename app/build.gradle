import dk.eboks.buildsrc.Keys
import dk.eboks.buildsrc.Libs
import dk.eboks.buildsrc.AppVersions

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.github.gfx.ribbonizer'
apply plugin: 'dk.nodes.ci.bitrise'
apply plugin: 'kotlin-kapt'

bitrise {
    defaultDeployMode = "release|debug"
    branchMode = true
}
android {
    compileSdkVersion buildConfig.compileSdk
    buildToolsVersion buildConfig.buildTools
    flavorDimensions "default"

    defaultConfig {
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk
        versionCode AppVersions.code
        versionName AppVersions.name
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        manifestPlaceholders = [
                appId : Keys.appId,
                apiKey: Keys.apiKey
        ]

        buildConfigField "Long", "INPUT_VALIDATION_DELAY", "2100L"

        // flags for disabling various functionality for the different betas
        buildConfigField "Boolean", "ENABLE_PROFILE_PICTURE", "false"
        buildConfigField "Boolean", "ENABLE_SENDERS", "false"
        buildConfigField "Boolean", "ENABLE_UPLOADS", "true"
        buildConfigField "Boolean", "ENABLE_DOCUMENT_ACTIONS", "true"
        buildConfigField "Boolean", "ENABLE_FOLDERS_ACTIONS", "true"
        buildConfigField "Boolean", "ENABLE_PAYMENT", "false"
        buildConfigField "Boolean", "ENABLE_EKEY", "true"
        buildConfigField "Boolean", "ENABLE_CHANNEL_REORDERING", "false"
        buildConfigField "Boolean", "ENABLE_PROFILE_DATA_VERIFICATION", "true"
        buildConfigField "Boolean", "ENABLE_SHARES", "false"
        buildConfigField "Boolean", "ENABLE_REPLY", "false"
        buildConfigField "Boolean", "ENABLE_SIGN", "true"
        buildConfigField "Boolean", "ENABLE_FINGERPRINT_NONVERIFIED", "false"
        buildConfigField "Boolean", "ENABLE_BETA_DISCLAIMER", "true"
        defaultConfig {
            vectorDrawables.useSupportLibrary = true
        }
    }

    signingConfigs {
        swedishDebug {
            keyAlias 'swedishDebug'
            keyPassword 'RR3UC8zaFegE2TJQhkDdC5TGhTZKRa'
            storeFile file('./keys/swedishDebug')
            storePassword 'RR3UC8zaFegE2TJQhkDdC5TGhTZKRa'
        }
        danishDebug {
            keyAlias 'danishDebug'
            keyPassword 'TseJ4a4k4n92kXjjZNcspUwd7Vw2nF'
            storeFile file('./keys/danishDebug')
            storePassword 'TseJ4a4k4n92kXjjZNcspUwd7Vw2nF'
        }
        norwegianDebug {
            keyAlias 'norwegianDebug'
            keyPassword 'WK3cVLvpUDDgN2p3N8QxRkwWM4BTBT'
            storeFile file('./keys/norwegianDebug')
            storePassword 'WK3cVLvpUDDgN2p3N8QxRkwWM4BTBT'
        }
        debug {
            keyAlias 'debug'
            keyPassword 'ssY4tz324b2jDmnCBuTMyY4Fx989XR'
            storeFile file('./keys/debug')
            storePassword 'ssY4tz324b2jDmnCBuTMyY4Fx989XR'
        }
        swedishProduction {
            keyAlias 'swedish'
            keyPassword 'WbjQfkYrjdHwx5Md49TWKSZqEkAEHB'
            storeFile file('./keys/swedish')
            storePassword 'WbjQfkYrjdHwx5Md49TWKSZqEkAEHB'
        }
        danishProduction {
            keyAlias 'danish'
            keyPassword 'zmXRagTN3SX96ZxPdLcY88qx5H7fym'
            storeFile file('./keys/danish')
            storePassword 'zmXRagTN3SX96ZxPdLcY88qx5H7fym'
        }
        norwegianProduction {
            keyAlias 'norwegian'
            keyPassword 'aMHG8ryp627E4gnSZRJr9j3uqxpnt9'
            storeFile file('./keys/norwegian')
            storePassword 'aMHG8ryp627E4gnSZRJr9j3uqxpnt9'
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            signingConfig null

            productFlavors.all { flavor ->
                switch (flavor.name) {
                    case "danish":
                        flavor.signingConfig signingConfigs.danishDebug
                        break
                    case "swedish":
                        flavor.signingConfig signingConfigs.swedishDebug
                        break
                    case "norwegian":
                        flavor.signingConfig signingConfigs.norwegianDebug
                        break
                }
            }

        }

        release {
            //debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            productFlavors.all { flavor ->
                switch (flavor.name) {
                    case "danish":
                        flavor.signingConfig signingConfigs.danishProduction
                        break
                    case "swedish":
                        flavor.signingConfig signingConfigs.swedishProduction
                        break
                    case "norwegian":
                        flavor.signingConfig signingConfigs.norwegianProduction
                        break
                }
            }
        }

        applicationVariants.all { variant ->
            def flavor = variant.getMergedFlavor()
            switch (variant.name) {
                case "danishDebug":
                    flavor.manifestPlaceholders.put("HOCKEYAPP_APP_ID", "5787fa63d0a0404bbdcd93456360db79")
                    break
                case "swedishDebug":
                    flavor.manifestPlaceholders.put("HOCKEYAPP_APP_ID", "74e3a5f6d05c4a02a17697bbb11d8af0")
                    break
                case "norwegianDebug":
                    flavor.manifestPlaceholders.put("HOCKEYAPP_APP_ID", "e323e110faa049b787027ea5b0a93cec")
                    break
            }
        }
    }

    productFlavors {
        danish {
            dimension "default"

            applicationId "dk.eboks.app"
            versionName AppVersions.name

            hockeyAppId = "c420719986b14750af457e6ac686fb5d"
            hockeyAppIdStaging = "5787fa63d0a0404bbdcd93456360db79"

            buildConfigField "String", "mode", '"danish"'
            buildConfigField "String", "locale", '"da-DK"'

            manifestPlaceholders = [
                    HOCKEYAPP_APP_ID: hockeyAppId,
                    APP_NAME        : "e-Boks.dk"
            ]
        }
        swedish {
            dimension "default"

            applicationId "se.eboks.app"
            versionName AppVersions.name

            hockeyAppId = "6cde34b0caee42cd938ed52b8e461b97"
            hockeyAppIdStaging = "74e3a5f6d05c4a02a17697bbb11d8af0"

            buildConfigField "String", "mode", '"swedish"'
            buildConfigField "String", "locale", '"sv-SE"'

            manifestPlaceholders = [
                    HOCKEYAPP_APP_ID: hockeyAppId,
                    APP_NAME        : "e-Boks.se"
            ]
        }
        norwegian {
            dimension "default"

            applicationId "no.eboks.app"
            versionName AppVersions.name

            hockeyAppId = "7ae0dc6ff4a945d18f4ec28cbf14f385"
            hockeyAppIdStaging = "e323e110faa049b787027ea5b0a93cec"

            buildConfigField "String", "mode", '"norwegian"'
            buildConfigField "String", "locale", '"nb-NO"'

            manifestPlaceholders = [
                    HOCKEYAPP_APP_ID: hockeyAppId,
                    APP_NAME        : "e-Boks.no"
            ]
        }

    }
}

repositories {
    mavenLocal()
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation project(":base")
    implementation project(":data")
    implementation project(":api")
    implementation project(":mail")
    implementation project(':keychain-presentation')

    // uncomment me if using multidex
    //implementation "com.android.support:multidex:$multidex_version"

    implementation Libs.Kotlin.stdlib
    implementation Libs.Kotlin.reflect
    implementation Libs.Coroutines.core
    implementation Libs.Coroutines.android


    implementation Libs.Nodes.arch
    implementation Libs.Nodes.Nstack.kotlin
    // Encryption Lib
    implementation Libs.Nodes.locksmith
    //implementation "dk.nodes.arch:base:LOCAL"
    implementation Libs.Nodes.filepicker

    implementation Libs.Google.material
    // Barcode Generation Library
    implementation Libs.Google.zxingCore

    implementation Libs.exifinterface

    implementation Libs.swipelayout

    implementation Libs.Dagger.dagger
    kapt Libs.Dagger.compiler

    implementation Libs.hockeySDK
    implementation Libs.timber
    implementation Libs.eventbus

    implementation Libs.fastscroll

    implementation Libs.materialedittext

    // circular progress
    implementation Libs.circularProgressBar
    implementation Libs.gson

    implementation Libs.RxJava.rxAndroid
    implementation Libs.RxJava.rxJava
    implementation Libs.RxJava.rxKotlin

    implementation Libs.Retrofit.retrofit

    implementation Libs.Glide.glide
    kapt Libs.Glide.compiler

    // Testing
    testImplementation Libs.junit
    // required if you want to use Mockito for unit tests
    testImplementation Libs.Test.Mockito.core
    // required if you want to use Mockito for Android tests
    androidTestImplementation Libs.Test.Mockito.android

    //For Espresso UI testing
    androidTestImplementation Libs.Test.Expresso.core
    androidTestImplementation Libs.Test.Expresso.intent
    androidTestImplementation Libs.Test.Expresso.contrib

}
