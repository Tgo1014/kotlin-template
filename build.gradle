// Top-level build file where you can add configuration options common to all sub-projects/modules.
import dk.eboks.buildsrc.Libs
import dk.eboks.buildsrc.Versions

buildscript {

    ext.buildConfig = [
            'compileSdk': 28,
            'minSdk'    : 21,
            'targetSdk' : 28,
            'buildTools': '28.0.3'
    ]

    repositories {
        maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url 'https://maven.google.com' }
        mavenCentral()
        google()
        jcenter()
        mavenLocal()
    }
    dependencies {
        classpath Libs.androidGradlePlugin
        classpath Libs.Kotlin.gradlePlugin
        classpath Libs.Nodes.Nstack.translation
        classpath Libs.Nodes.bitrise
        classpath Libs.ribbonizer
        classpath Libs.Test.jacoco

    }
}

plugins {
    id "com.diffplug.gradle.spotless" version "3.19.0"
    id 'com.github.ben-manes.versions' version "0.21.0"
}


allprojects {
    repositories {
        maven { url 'https://maven.google.com' }
        maven { url "https://jitpack.io" }
        mavenCentral()
        jcenter()
        google()
        mavenLocal()
    }




}

subprojects {
    apply plugin: 'com.diffplug.gradle.spotless'
    spotless {
        kotlin {
            target "**/*.kt"
            ktlint(Versions.ktlint)
        }
    }
}

def coverageExcludes = ['**/R.class',
                        '**/R$*.class',
                        '**/*$$ViewBinder*.*',
                        '**/inject/*',
                        '**/*$InjectAdapter.*',
                        '**/BuildConfig.*',
                        '**/Manifest*.*',
                        '**/Dagger*.*',
                        '**/*_Provide*Factory.*',
                        '**/*_Member*Injector.*',
                        '**/*_Factory.*']

def modules = ["core", "data"]
def moduleTasks = modules.collect { it + ":jacocoTestReport" }

def coverageSourceDirs = modules.collect { it + "src/main/java"}
def coverageClassDirectories = modules.collect { fileTree(dir: it + "/build/intermediates/classes/debug", excludes: coverageExcludes) }


task jacocoRootReport(type: JacocoReport, dependsOn: moduleTasks) {
    apply plugin: 'jacoco'

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    classDirectories = files(coverageClassDirectories)

    executionData = files(moduleTasks.collect { tasks.getByPath(it).executionData })


    reports {

        html.enabled = true
        xml.enabled = false
        csv.enabled = false
    }
    onlyIf = {
        true
    }

    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}