// Top-level build file where you can add configuration options common to all sub-projects/modules.
import dk.eboks.buildsrc.Libs
import dk.eboks.buildsrc.Versions
import dk.eboks.buildsrc.Modules

buildscript {

    ext.buildConfig = [
            'compileSdk': 28,
            'minSdk'    : 21,
            'targetSdk' : 28,
            'buildTools': '28.0.3'
    ]

    repositories {
        maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url 'https://maven.google.com' }
        mavenCentral()
        google()
        jcenter()
        mavenLocal()
    }
    dependencies {
        classpath Libs.androidGradlePlugin
        classpath Libs.Kotlin.gradlePlugin
        classpath Libs.Nodes.Nstack.translation
        classpath Libs.Nodes.bitrise
        classpath Libs.ribbonizer
        classpath Libs.Test.jacoco

    }
}

plugins {
    id "com.diffplug.gradle.spotless" version "3.19.0"
    id 'com.github.ben-manes.versions' version "0.21.0"
}


allprojects {
    repositories {
        maven { url 'https://maven.google.com' }
        maven { url "https://jitpack.io" }
        mavenCentral()
        jcenter()
        google()
        mavenLocal()
    }


}

subprojects {
    apply plugin: 'com.diffplug.gradle.spotless'
    spotless {
        kotlin {
            target "**/*.kt"
            ktlint(Versions.ktlint)
        }
    }
}

def modules = [
        Modules.Channels.interactors,
        Modules.Channels.presentation,
        Modules.Mail.presentation,
        Modules.Mail.interactors,
        Modules.Keychain.presentation,
        Modules.Keychain.interactors,
        Modules.Profile.interactors,
        Modules.Profile.presentation,
        Modules.Senders.interactors,
        Modules.Senders.presentation,
]

def moduleTasks = modules.collect { it + ":jacocoTestReport" }


apply plugin: 'jacoco'
task jacocoRootReport(type: JacocoReport, dependsOn: moduleTasks) {


    reports {

        html.enabled = true
        xml.enabled = false
        csv.enabled = false
    }

    executionData = files(moduleTasks.collect { tasks.getByPath(it).executionData })
    sourceDirectories = files(moduleTasks.collect { tasks.getByPath(it).sourceDirectories })
    classDirectories = files(moduleTasks.collect { tasks.getByPath(it).classDirectories })


}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}