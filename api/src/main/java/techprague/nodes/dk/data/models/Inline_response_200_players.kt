/**
 * OpenDota API
 * # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.
 *
 * OpenAPI spec version: 17.6.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package techprague.nodes.dk.data.models

/**
 * player
 * @param match_id Match ID
 * @param player_slot Which slot the player is in. 0-127 are Radiant, 128-255 are Dire
 * @param ability_upgrades_arr An array describing how abilities were upgraded
 * @param ability_uses Object containing information on how many times the played used their abilities
 * @param ability_targets Object containing information on who the player used their abilities on
 * @param damage_targets Object containing information on how and how much damage the player dealt to other heroes
 * @param account_id account_id
 * @param actions Object containing information on how many and what type of actions the player issued to their hero
 * @param additional_units Object containing information on additional units the player had under their control
 * @param assists Number of assists the player had
 * @param backpack_0 Item in backpack slot 0
 * @param backpack_1 Item in backpack slot 1
 * @param backpack_2 Item in backpack slot 2
 * @param buyback_log Array containing information about buybacks
 * @param camps_stacked Number of camps stacked
 * @param connection_log Array containing information about the player's disconnections and reconnections
 * @param creeps_stacked Number of creeps stacked
 * @param damage Object containing information about damage dealt by the player to different units
 * @param damage_inflictor Object containing information about about the sources of this player's damage to heroes
 * @param damage_inflictor_received Object containing information about the sources of damage received by this player from heroes
 * @param damage_taken Object containing information about from whom the player took damage
 * @param deaths Number of deaths
 * @param denies Number of denies
 * @param dn_t Array containing number of denies at different times of the match
 * @param gold Gold at the end of the game
 * @param gold_per_min Gold Per Minute obtained by this player
 * @param gold_reasons Object containing information on how the player gainined gold over the course of the match
 * @param gold_spent How much gold the player spent
 * @param gold_t Array containing total gold at different times of the match
 * @param hero_damage Hero Damage Dealt
 * @param hero_healing Hero Healing Done
 * @param hero_hits Object containing information on how many ticks of damages the hero inflicted with different spells and damage inflictors
 * @param hero_id The ID value of the hero played
 * @param item_0 Item in the player's first slot
 * @param item_1 Item in the player's second slot
 * @param item_2 Item in the player's third slot
 * @param item_3 Item in the player's fourth slot
 * @param item_4 Item in the player's fifth slot
 * @param item_5 Item in the player's sixth slot
 * @param item_uses Object containing information about how many times a player used items
 * @param kill_streaks Object containing information about the player's killstreaks
 * @param killed Object containing information about what units the player killed
 * @param killed_by Object containing information about who killed the player
 * @param kills Number of kills
 * @param kills_log Array containing information on which hero the player killed at what time
 * @param lane_pos Object containing information on lane position
 * @param last_hits Number of last hits
 * @param leaver_status Integer describing whether or not the player left the game. 0: didn't leave. 1: left safely. 2+: Abandoned
 * @param level Level at the end of the game
 * @param lh_t Array describing last hits at each minute in the game
 * @param life_state life_state
 * @param max_hero_hit Object with information on the highest damage instance the player inflicted
 * @param multi_kills Object with information on the number of the number of multikills the player had
 * @param obs Object with information on where the player placed observer wards. The location takes the form (outer number, inner number) and are from ~64-192.
 * @param obs_left_log obs_left_log
 * @param obs_log Object containing information on when and where the player placed observer wards
 * @param obs_placed Total number of observer wards placed
 * @param party_id party_id
 * @param permanent_buffs Array describing permanent buffs the player had at the end of the game. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/permanent_buffs.json
 * @param pings Total number of pings
 * @param purchase Object containing information on the items the player purchased
 * @param purchase_log Object containing information on when items were purchased
 * @param rune_pickups Number of runes picked up
 * @param runes Object with information about which runes the player picked up
 * @param runes_log Array with information on when runes were picked up
 * @param sen Object with information on where sentries were placed. The location takes the form (outer number, inner number) and are from ~64-192.
 * @param sen_left_log Array containing information on when and where the player placed sentries
 * @param sen_log Array with information on when and where sentries were placed by the player
 * @param sen_placed How many sentries were placed by the player
 * @param stuns Total stun duration of all stuns by the player
 * @param times Time in seconds corresponding to the time of entries of other arrays in the match.
 * @param tower_damage Total tower damage done by the player
 * @param xp_per_min Experience Per Minute obtained by the player
 * @param xp_reasons Object containing information on the sources of this player's experience
 * @param xp_t Experience at each minute of the game
 * @param personaname personaname
 * @param name name
 * @param radiant_win Boolean indicating whether Radiant won the match
 * @param start_time Start time of the match in seconds since 1970
 * @param duration Duration of the game in seconds
 * @param cluster cluster
 * @param lobby_type Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json
 * @param game_mode Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json
 * @param patch Integer representing the patch the game was played on
 * @param region Integer corresponding to the region the game was played on
 * @param isRadiant Boolean for whether or not the player is on Radiant
 * @param win Binary integer representing whether or not the player won
 * @param lose Binary integer representing whether or not the player lost
 * @param total_gold Total gold at the end of the game
 * @param total_xp Total experience at the end of the game
 * @param kills_per_min Number of kills per minute
 * @param kda kda
 * @param abandons abandons
 * @param neutral_kills Total number of neutral creeps killed
 * @param tower_kills Total number of tower kills the player had
 * @param courier_kills Total number of courier kills the player had
 * @param lane_kills Total number of lane creeps killed by the player
 * @param hero_kills Total number of heroes killed by the player
 * @param observer_kills Total number of observer wards killed by the player
 * @param sentry_kills Total number of sentry wards killed by the player
 * @param roshan_kills Total number of roshan kills (last hit on roshan) the player had
 * @param necronomicon_kills Total number of Necronomicon creeps killed by the player
 * @param ancient_kills Total number of Ancient creeps killed by the player
 * @param buyback_count Total number of buyback the player used
 * @param observer_uses Number of observer wards used
 * @param sentry_uses Number of sentry wards used
 * @param lane_efficiency lane_efficiency
 * @param lane_efficiency_pct lane_efficiency_pct
 * @param lane Integer referring to which lane the hero laned in
 * @param lane_role lane_role
 * @param is_roaming Boolean referring to whether or not the player roamed
 * @param purchase_time Object with information on when the player last purchased an item
 * @param first_purchase_time Object with information on when the player first puchased an item
 * @param item_win Object with information on whether or not the item won
 * @param item_usage Object containing binary integers the tell whether the item was purchased by the player (note: this is always 1)
 * @param purchase_tpscroll Total number of TP scrolls purchased by the player
 * @param actions_per_min Actions per minute
 * @param life_state_dead life_state_dead
 * @param rank_tier The rank tier of the player. Tens place indicates rank, ones place indicates stars.
 * @param cosmetics cosmetics
 * @param benchmarks Object containing information on certain benchmarks like GPM, XPM, KDA, tower damage, etc
 */
data class Inline_response_200_players(
    /* Match ID */
    val match_id: Int? = null,

    /* Which slot the player is in. 0-127 are Radiant, 128-255 are Dire */
    val player_slot: Int? = null,

    /* An array describing how abilities were upgraded */
    val ability_upgrades_arr: Array<Int>? = null,

    /* Object containing information on how many times the played used their abilities */
    val ability_uses: Any? = null,

    /* Object containing information on who the player used their abilities on */
    val ability_targets: Any? = null,

    /* Object containing information on how and how much damage the player dealt to other heroes */
    val damage_targets: Any? = null,

    /* account_id */
    val account_id: Int? = null,

    /* Object containing information on how many and what type of actions the player issued to their hero */
    val actions: Any? = null,

    /* Object containing information on additional units the player had under their control */
    val additional_units: Any? = null,

    /* Number of assists the player had */
    val assists: Int? = null,

    /* Item in backpack slot 0 */
    val backpack_0: Int? = null,

    /* Item in backpack slot 1 */
    val backpack_1: Int? = null,

    /* Item in backpack slot 2 */
    val backpack_2: Int? = null,

    /* Array containing information about buybacks */
    val buyback_log: Array<Inline_response_200_buyback_log>? = null,

    /* Number of camps stacked */
    val camps_stacked: Int? = null,

    /* Array containing information about the player's disconnections and reconnections */
    val connection_log: Array<Inline_response_200_connection_log>? = null,

    /* Number of creeps stacked */
    val creeps_stacked: Int? = null,

    /* Object containing information about damage dealt by the player to different units */
    val damage: Any? = null,

    /* Object containing information about about the sources of this player's damage to heroes */
    val damage_inflictor: Any? = null,

    /* Object containing information about the sources of damage received by this player from heroes */
    val damage_inflictor_received: Any? = null,

    /* Object containing information about from whom the player took damage */
    val damage_taken: Any? = null,

    /* Number of deaths */
    val deaths: Int? = null,

    /* Number of denies */
    val denies: Int? = null,

    /* Array containing number of denies at different times of the match */
    val dn_t: Array<Int>? = null,

    /* Gold at the end of the game */
    val gold: Int? = null,

    /* Gold Per Minute obtained by this player */
    val gold_per_min: Int? = null,

    /* Object containing information on how the player gainined gold over the course of the match */
    val gold_reasons: Any? = null,

    /* How much gold the player spent */
    val gold_spent: Int? = null,

    /* Array containing total gold at different times of the match */
    val gold_t: Array<Int>? = null,

    /* Hero Damage Dealt */
    val hero_damage: Int? = null,

    /* Hero Healing Done */
    val hero_healing: Int? = null,

    /* Object containing information on how many ticks of damages the hero inflicted with different spells and damage inflictors */
    val hero_hits: Any? = null,

    /* The ID value of the hero played */
    val hero_id: Int? = null,

    /* Item in the player's first slot */
    val item_0: Int? = null,

    /* Item in the player's second slot */
    val item_1: Int? = null,

    /* Item in the player's third slot */
    val item_2: Int? = null,

    /* Item in the player's fourth slot */
    val item_3: Int? = null,

    /* Item in the player's fifth slot */
    val item_4: Int? = null,

    /* Item in the player's sixth slot */
    val item_5: Int? = null,

    /* Object containing information about how many times a player used items */
    val item_uses: Any? = null,

    /* Object containing information about the player's killstreaks */
    val kill_streaks: Any? = null,

    /* Object containing information about what units the player killed */
    val killed: Any? = null,

    /* Object containing information about who killed the player */
    val killed_by: Any? = null,

    /* Number of kills */
    val kills: Int? = null,

    /* Array containing information on which hero the player killed at what time */
    val kills_log: Array<Inline_response_200_kills_log>? = null,

    /* Object containing information on lane position */
    val lane_pos: Any? = null,

    /* Number of last hits */
    val last_hits: Int? = null,

    /* Integer describing whether or not the player left the game. 0: didn't leave. 1: left safely. 2+: Abandoned */
    val leaver_status: Int? = null,

    /* Level at the end of the game */
    val level: Int? = null,

    /* Array describing last hits at each minute in the game */
    val lh_t: Array<Int>? = null,

    /* life_state */
    val life_state: Any? = null,

    /* Object with information on the highest damage instance the player inflicted */
    val max_hero_hit: Any? = null,

    /* Object with information on the number of the number of multikills the player had */
    val multi_kills: Any? = null,

    /* Object with information on where the player placed observer wards. The location takes the form (outer number, inner number) and are from ~64-192. */
    val obs: Any? = null,

    /* obs_left_log */
    val obs_left_log: Array<Any>? = null,

    /* Object containing information on when and where the player placed observer wards */
    val obs_log: Array<Any>? = null,

    /* Total number of observer wards placed */
    val obs_placed: Int? = null,

    /* party_id */
    val party_id: Int? = null,

    /* Array describing permanent buffs the player had at the end of the game. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/permanent_buffs.json */
    val permanent_buffs: Array<Any>? = null,

    /* Total number of pings */
    val pings: Int? = null,

    /* Object containing information on the items the player purchased */
    val purchase: Any? = null,

    /* Object containing information on when items were purchased */
    val purchase_log: Array<Inline_response_200_purchase_log>? = null,

    /* Number of runes picked up */
    val rune_pickups: Int? = null,

    /* Object with information about which runes the player picked up */
    val runes: kotlin.collections.Map<String, Int>? = null,

    /* Array with information on when runes were picked up */
    val runes_log: Array<Inline_response_200_runes_log>? = null,

    /* Object with information on where sentries were placed. The location takes the form (outer number, inner number) and are from ~64-192. */
    val sen: Any? = null,

    /* Array containing information on when and where the player placed sentries */
    val sen_left_log: Array<Any>? = null,

    /* Array with information on when and where sentries were placed by the player */
    val sen_log: Array<Any>? = null,

    /* How many sentries were placed by the player */
    val sen_placed: Int? = null,

    /* Total stun duration of all stuns by the player */
    val stuns: java.math.BigDecimal? = null,

    /* Time in seconds corresponding to the time of entries of other arrays in the match. */
    val times: Array<Int>? = null,

    /* Total tower damage done by the player */
    val tower_damage: Int? = null,

    /* Experience Per Minute obtained by the player */
    val xp_per_min: Int? = null,

    /* Object containing information on the sources of this player's experience */
    val xp_reasons: Any? = null,

    /* Experience at each minute of the game */
    val xp_t: Array<Int>? = null,

    /* personaname */
    val personaname: String? = null,

    /* name */
    val name: String? = null,

    /* Boolean indicating whether Radiant won the match */
    val radiant_win: Boolean? = null,

    /* Start time of the match in seconds since 1970 */
    val start_time: Int? = null,

    /* Duration of the game in seconds */
    val duration: Int? = null,

    /* cluster */
    val cluster: Int? = null,

    /* Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json */
    val lobby_type: Int? = null,

    /* Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json */
    val game_mode: Int? = null,

    /* Integer representing the patch the game was played on */
    val patch: Int? = null,

    /* Integer corresponding to the region the game was played on */
    val region: Int? = null,

    /* Boolean for whether or not the player is on Radiant */
    val isRadiant: Boolean? = null,

    /* Binary integer representing whether or not the player won */
    val win: Int? = null,

    /* Binary integer representing whether or not the player lost */
    val lose: Int? = null,

    /* Total gold at the end of the game */
    val total_gold: Int? = null,

    /* Total experience at the end of the game */
    val total_xp: Int? = null,

    /* Number of kills per minute */
    val kills_per_min: java.math.BigDecimal? = null,

    /* kda */
    val kda: java.math.BigDecimal? = null,

    /* abandons */
    val abandons: Int? = null,

    /* Total number of neutral creeps killed */
    val neutral_kills: Int? = null,

    /* Total number of tower kills the player had */
    val tower_kills: Int? = null,

    /* Total number of courier kills the player had */
    val courier_kills: Int? = null,

    /* Total number of lane creeps killed by the player */
    val lane_kills: Int? = null,

    /* Total number of heroes killed by the player */
    val hero_kills: Int? = null,

    /* Total number of observer wards killed by the player */
    val observer_kills: Int? = null,

    /* Total number of sentry wards killed by the player */
    val sentry_kills: Int? = null,

    /* Total number of roshan kills (last hit on roshan) the player had */
    val roshan_kills: Int? = null,

    /* Total number of Necronomicon creeps killed by the player */
    val necronomicon_kills: Int? = null,

    /* Total number of Ancient creeps killed by the player */
    val ancient_kills: Int? = null,

    /* Total number of buyback the player used */
    val buyback_count: Int? = null,

    /* Number of observer wards used */
    val observer_uses: Int? = null,

    /* Number of sentry wards used */
    val sentry_uses: Int? = null,

    /* lane_efficiency */
    val lane_efficiency: java.math.BigDecimal? = null,

    /* lane_efficiency_pct */
    val lane_efficiency_pct: java.math.BigDecimal? = null,

    /* Integer referring to which lane the hero laned in */
    val lane: Int? = null,

    /* lane_role */
    val lane_role: Int? = null,

    /* Boolean referring to whether or not the player roamed */
    val is_roaming: Boolean? = null,

    /* Object with information on when the player last purchased an item */
    val purchase_time: Any? = null,

    /* Object with information on when the player first puchased an item */
    val first_purchase_time: Any? = null,

    /* Object with information on whether or not the item won */
    val item_win: Any? = null,

    /* Object containing binary integers the tell whether the item was purchased by the player (note: this is always 1) */
    val item_usage: Any? = null,

    /* Total number of TP scrolls purchased by the player */
    val purchase_tpscroll: Any? = null,

    /* Actions per minute */
    val actions_per_min: Int? = null,

    /* life_state_dead */
    val life_state_dead: Int? = null,

    /* The rank tier of the player. Tens place indicates rank, ones place indicates stars. */
    val rank_tier: Int? = null,

    /* cosmetics */
    val cosmetics: Array<Int>? = null,

    /* Object containing information on certain benchmarks like GPM, XPM, KDA, tower damage, etc */
    val benchmarks: Any? = null
)
