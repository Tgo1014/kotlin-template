/**
 * OpenDota API
 * # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.
 *
 * OpenAPI spec version: 17.6.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package techprague.nodes.dk.data.apis

import retrofit2.Call
import retrofit2.http.GET
import retrofit2.http.POST
import retrofit2.http.Path
import retrofit2.http.Query
import techprague.nodes.dk.data.models.Inline_response_200_10
import techprague.nodes.dk.data.models.Inline_response_200_11
import techprague.nodes.dk.data.models.Inline_response_200_2
import techprague.nodes.dk.data.models.Inline_response_200_9
import techprague.nodes.dk.data.models.body.AccountById

interface PlayersApi {

    /**
     * GET /players/{account_id}/counts
     * Counts in categories
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches. (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return Call&lt;Inline_response_200_9&gt;
     */
    @GET("/players/{account_id}/counts")
    fun playersAccountIdCountsGet(
        @Path("account_id") accountId: Int,
        @Query("limit") limit: Int,
        @Query("offset") offset: Int,
        @Query("win") win: Int,
        @Query("patch") patch: Int,
        @Query("game_mode") gameMode: Int,
        @Query("lobby_type") lobbyType: Int,
        @Query("region") region: Int,
        @Query("date") date: Int,
        @Query("lane_role") laneRole: Int,
        @Query("hero_id") heroId: Int,
        @Query("is_radiant") isRadiant: Int,
        @Query("included_account_id") includedAccountId: Int,
        @Query("excluded_account_id") excludedAccountId: Int,
        @Query("with_hero_id") withHeroId: Int,
        @Query("against_hero_id") againstHeroId: Int,
        @Query("significant") significant: Int,
        @Query("having") having: Int,
        @Query("sort") sort: String
    ): Call<Inline_response_200_9>

    /**
     * GET /players/{account_id}
     * Player data
     * @param accountId Steam32 account ID (required)
     * @return Call&lt;Inline_response_200_1&gt;
     */
    @GET("/players/{account_id}")
    fun playersAccountIdGet(@Path("account_id") accountId: Int): Call<AccountById>

    /**
     * GET /players/{account_id}/heroes
     * Heroes played
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches. (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return Call&lt;Array&lt;Any&gt;&gt;
     */
    @GET("/players/{account_id}/heroes")
    fun playersAccountIdHeroesGet(
        @Path("account_id") accountId: Int,
        @Query("limit") limit: Int,
        @Query("offset") offset: Int,
        @Query("win") win: Int,
        @Query("patch") patch: Int,
        @Query("game_mode") gameMode: Int,
        @Query("lobby_type") lobbyType: Int,
        @Query("region") region: Int,
        @Query("date") date: Int,
        @Query("lane_role") laneRole: Int,
        @Query("hero_id") heroId: Int,
        @Query("is_radiant") isRadiant: Int,
        @Query("included_account_id") includedAccountId: Int,
        @Query("excluded_account_id") excludedAccountId: Int,
        @Query("with_hero_id") withHeroId: Int,
        @Query("against_hero_id") againstHeroId: Int,
        @Query("significant") significant: Int,
        @Query("having") having: Int,
        @Query("sort") sort: String
    ): Call<Array<Any>>

    /**
     * GET /players/{account_id}/histograms
     * Distribution of matches in a single stat
     * @param accountId Steam32 account ID (required)
     * @param field Field to aggregate on (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches. (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return Call&lt;Array&lt;Any&gt;&gt;
     */
    @GET("/players/{account_id}/histograms/{field}")
    fun playersAccountIdHistogramsFieldGet(
        @Path("account_id") accountId: Int,
        @Path("field") field: String,
        @Query("limit") limit: Int,
        @Query("offset") offset: Int,
        @Query("win") win: Int,
        @Query("patch") patch: Int,
        @Query("game_mode") gameMode: Int,
        @Query("lobby_type") lobbyType: Int,
        @Query("region") region: Int,
        @Query("date") date: Int,
        @Query("lane_role") laneRole: Int,
        @Query("hero_id") heroId: Int,
        @Query("is_radiant") isRadiant: Int,
        @Query("included_account_id") includedAccountId: Int,
        @Query("excluded_account_id") excludedAccountId: Int,
        @Query("with_hero_id") withHeroId: Int,
        @Query("against_hero_id") againstHeroId: Int,
        @Query("significant") significant: Int,
        @Query("having") having: Int,
        @Query("sort") sort: String
    ): Call<Array<Any>>

    /**
     * GET /players/{account_id}/matches
     * Matches played
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches. (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @param project Fields to project (array) (optional)
     * @return Call&lt;Array&lt;Any&gt;&gt;
     */
    @GET("/players/{account_id}/matches")
    fun playersAccountIdMatchesGet(
        @Path("account_id") accountId: Int,
        @Query("limit") limit: Int,
        @Query("offset") offset: Int,
        @Query("win") win: Int,
        @Query("patch") patch: Int,
        @Query("game_mode") gameMode: Int,
        @Query("lobby_type") lobbyType: Int,
        @Query("region") region: Int,
        @Query("date") date: Int,
        @Query("lane_role") laneRole: Int,
        @Query("hero_id") heroId: Int,
        @Query("is_radiant") isRadiant: Int,
        @Query("included_account_id") includedAccountId: Int,
        @Query("excluded_account_id") excludedAccountId: Int,
        @Query("with_hero_id") withHeroId: Int,
        @Query("against_hero_id") againstHeroId: Int,
        @Query("significant") significant: Int,
        @Query("having") having: Int,
        @Query("sort") sort: String,
        @Query("project") project: String
    ): Call<Array<Any>>

    /**
     * GET /players/{account_id}/peers
     * Players played with
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches. (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return Call&lt;Array&lt;Any&gt;&gt;
     */
    @GET("/players/{account_id}/peers")
    fun playersAccountIdPeersGet(
        @Path("account_id") accountId: Int,
        @Query("limit") limit: Int,
        @Query("offset") offset: Int,
        @Query("win") win: Int,
        @Query("patch") patch: Int,
        @Query("game_mode") gameMode: Int,
        @Query("lobby_type") lobbyType: Int,
        @Query("region") region: Int,
        @Query("date") date: Int,
        @Query("lane_role") laneRole: Int,
        @Query("hero_id") heroId: Int,
        @Query("is_radiant") isRadiant: Int,
        @Query("included_account_id") includedAccountId: Int,
        @Query("excluded_account_id") excludedAccountId: Int,
        @Query("with_hero_id") withHeroId: Int,
        @Query("against_hero_id") againstHeroId: Int,
        @Query("significant") significant: Int,
        @Query("having") having: Int,
        @Query("sort") sort: String
    ): Call<Array<Any>>

    /**
     * GET /players/{account_id}/pros
     * Pro players played with
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches. (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return Call&lt;Array&lt;Any&gt;&gt;
     */
    @GET("/players/{account_id}/pros")
    fun playersAccountIdProsGet(
        @Path("account_id") accountId: Int,
        @Query("limit") limit: Int,
        @Query("offset") offset: Int,
        @Query("win") win: Int,
        @Query("patch") patch: Int,
        @Query("game_mode") gameMode: Int,
        @Query("lobby_type") lobbyType: Int,
        @Query("region") region: Int,
        @Query("date") date: Int,
        @Query("lane_role") laneRole: Int,
        @Query("hero_id") heroId: Int,
        @Query("is_radiant") isRadiant: Int,
        @Query("included_account_id") includedAccountId: Int,
        @Query("excluded_account_id") excludedAccountId: Int,
        @Query("with_hero_id") withHeroId: Int,
        @Query("against_hero_id") againstHeroId: Int,
        @Query("significant") significant: Int,
        @Query("having") having: Int,
        @Query("sort") sort: String
    ): Call<Array<Any>>

    /**
     * GET /players/{account_id}/rankings
     * Player hero rankings
     * @param accountId Steam32 account ID (required)
     * @return Call&lt;Array&lt;Any&gt;&gt;
     */
    @GET("/players/{account_id}/rankings")
    fun playersAccountIdRankingsGet(@Path("account_id") accountId: Int): Call<Array<Any>>

    /**
     * GET /players/{account_id}/ratings
     * Player rating history
     * @param accountId Steam32 account ID (required)
     * @return Call&lt;Array&lt;Any&gt;&gt;
     */
    @GET("/players/{account_id}/ratings")
    fun playersAccountIdRatingsGet(@Path("account_id") accountId: Int): Call<Array<Any>>

    /**
     * GET /players/{account_id}/recentMatches
     * Recent matches played
     * @param accountId Steam32 account ID (required)
     * @return Call&lt;Array&lt;Any&gt;&gt;
     */
    @GET("/players/{account_id}/recentMatches")
    fun playersAccountIdRecentMatchesGet(@Path("account_id") accountId: Int): Call<Array<Any>>

    /**
     * POST /players/{account_id}/refresh
     * Refresh player match history
     * @param accountId Steam32 account ID (required)
     * @return Call&lt;Any&gt;
     */
    @POST("/players/{account_id}/refresh")
    fun playersAccountIdRefreshPost(@Path("account_id") accountId: Int): Call<Any>

    /**
     * GET /players/{account_id}/totals
     * Totals in stats
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches. (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return Call&lt;Array&lt;Any&gt;&gt;
     */
    @GET("/players/{account_id}/totals")
    fun playersAccountIdTotalsGet(
        @Path("account_id") accountId: Int,
        @Query("limit") limit: Int,
        @Query("offset") offset: Int,
        @Query("win") win: Int,
        @Query("patch") patch: Int,
        @Query("game_mode") gameMode: Int,
        @Query("lobby_type") lobbyType: Int,
        @Query("region") region: Int,
        @Query("date") date: Int,
        @Query("lane_role") laneRole: Int,
        @Query("hero_id") heroId: Int,
        @Query("is_radiant") isRadiant: Int,
        @Query("included_account_id") includedAccountId: Int,
        @Query("excluded_account_id") excludedAccountId: Int,
        @Query("with_hero_id") withHeroId: Int,
        @Query("against_hero_id") againstHeroId: Int,
        @Query("significant") significant: Int,
        @Query("having") having: Int,
        @Query("sort") sort: String
    ): Call<Array<Any>>

    /**
     * GET /players/{account_id}/wardmap
     * Wards placed in matches played
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches. (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return Call&lt;Inline_response_200_10&gt;
     */
    @GET("/players/{account_id}/wardmap")
    fun playersAccountIdWardmapGet(
        @Path("account_id") accountId: Int,
        @Query("limit") limit: Int,
        @Query("offset") offset: Int,
        @Query("win") win: Int,
        @Query("patch") patch: Int,
        @Query("game_mode") gameMode: Int,
        @Query("lobby_type") lobbyType: Int,
        @Query("region") region: Int,
        @Query("date") date: Int,
        @Query("lane_role") laneRole: Int,
        @Query("hero_id") heroId: Int,
        @Query("is_radiant") isRadiant: Int,
        @Query("included_account_id") includedAccountId: Int,
        @Query("excluded_account_id") excludedAccountId: Int,
        @Query("with_hero_id") withHeroId: Int,
        @Query("against_hero_id") againstHeroId: Int,
        @Query("significant") significant: Int,
        @Query("having") having: Int,
        @Query("sort") sort: String
    ): Call<Inline_response_200_10>

    /**
     * GET /players/{account_id}/wl
     * Win/Loss count
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches. (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return Call&lt;Inline_response_200_2&gt;
     */
    @GET("/players/{account_id}/wl")
    fun playersAccountIdWlGet(
        @Path("account_id") accountId: Int,
        @Query("limit") limit: Int,
        @Query("offset") offset: Int,
        @Query("win") win: Int,
        @Query("patch") patch: Int,
        @Query("game_mode") gameMode: Int,
        @Query("lobby_type") lobbyType: Int,
        @Query("region") region: Int,
        @Query("date") date: Int,
        @Query("lane_role") laneRole: Int,
        @Query("hero_id") heroId: Int,
        @Query("is_radiant") isRadiant: Int,
        @Query("included_account_id") includedAccountId: Int,
        @Query("excluded_account_id") excludedAccountId: Int,
        @Query("with_hero_id") withHeroId: Int,
        @Query("against_hero_id") againstHeroId: Int,
        @Query("significant") significant: Int,
        @Query("having") having: Int,
        @Query("sort") sort: String
    ): Call<Inline_response_200_2>

    /**
     * GET /players/{account_id}/wordcloud
     * Words said/read in matches played
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches. (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return Call&lt;Inline_response_200_11&gt;
     */
    @GET("/players/{account_id}/wordcloud")
    fun playersAccountIdWordcloudGet(
        @Path("account_id") accountId: Int,
        @Query("limit") limit: Int,
        @Query("offset") offset: Int,
        @Query("win") win: Int,
        @Query("patch") patch: Int,
        @Query("game_mode") gameMode: Int,
        @Query("lobby_type") lobbyType: Int,
        @Query("region") region: Int,
        @Query("date") date: Int,
        @Query("lane_role") laneRole: Int,
        @Query("hero_id") heroId: Int,
        @Query("is_radiant") isRadiant: Int,
        @Query("included_account_id") includedAccountId: Int,
        @Query("excluded_account_id") excludedAccountId: Int,
        @Query("with_hero_id") withHeroId: Int,
        @Query("against_hero_id") againstHeroId: Int,
        @Query("significant") significant: Int,
        @Query("having") having: Int,
        @Query("sort") sort: String
    ): Call<Inline_response_200_11>
}
